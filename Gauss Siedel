#include <iostream>
#include <vector>
#include <cmath>

using namespace std;

const double TOLERANCE = 1e-6; // Convergence tolerance
const int MAX_ITER = 100;      // Maximum number of iterations

// Function to perform the Gauss-Seidel Method
vector<double> gaussSeidelMethod(const vector<vector<double>>& A, const vector<double>& b) {
    int n = A.size();
    vector<double> x(n, 0.0); // Initial guess (zero vector)

    for (int iter = 0; iter < MAX_ITER; iter++) {
        vector<double> x_old = x; // Store old values for convergence check

        for (int i = 0; i < n; i++) {
            double sum1 = 0.0, sum2 = 0.0;

            // Sum for known updated values
            for (int j = 0; j < i; j++) {
                sum1 += A[i][j] * x[j];
            }
            // Sum for previous iteration values
            for (int j = i + 1; j < n; j++) {
                sum2 += A[i][j] * x_old[j];
            }

            x[i] = (b[i] - sum1 - sum2) / A[i][i]; // Gauss-Seidel update
        }

        // Check for convergence
        double error = 0.0;
        for (int i = 0; i < n; i++)
            error += abs(x[i] - x_old[i]);

        if (error < TOLERANCE)
            break;
    }

    return x;
}

int main() {
    // Example system: 3x + y = 9, x + 2y = 8
    vector<vector<double>> A = {{-5,2,3}, {-3,9,1},{2,-1,-7}};
    vector<double> b = {1,2,3};

    vector<double> solution = gaussSeidelMethod(A, b);

    cout << "Solution:" << endl;
    for (double val : solution) {
        cout << val << " ";
    }
    cout << endl;

    return 0;
}
//-0.506608 0.118943 -0.590308 
