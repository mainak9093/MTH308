#include <iostream>
#include <vector>
#include <iomanip>
using namespace std;

// Function to perform LU Decomposition
void luDecomposition(vector<vector<double>>& A, vector<vector<double>>& L, vector<vector<double>>& U, int n) {
    for (int i = 0; i < n; i++) {
        // Upper Triangular Matrix U
        for (int k = i; k < n; k++) {
            double sum = 0;
            for (int j = 0; j < i; j++) {
                sum += (L[i][j] * U[j][k]);
            }
            U[i][k] = A[i][k] - sum;
        }
        
        // Lower Triangular Matrix L
        for (int k = i; k < n; k++) {
            if (i == k)
                L[i][i] = 1; // Diagonal elements of L are 1
            else {
                double sum = 0;
                for (int j = 0; j < i; j++) {
                    sum += (L[k][j] * U[j][i]);
                }
                L[k][i] = (A[k][i] - sum) / U[i][i];
            }
        }
    }
}

// Function to solve LY = B using Forward Substitution
vector<double> forwardSubstitution(vector<vector<double>>& L, vector<double>& B, int n) {
    vector<double> Y(n, 0);
    for (int i = 0; i < n; i++) {
        double sum = 0;
        for (int j = 0; j < i; j++) {
            sum += L[i][j] * Y[j];
        }
        Y[i] = (B[i] - sum);
    }
    return Y;
}

// Function to solve UX = Y using Backward Substitution
vector<double> backwardSubstitution(vector<vector<double>>& U, vector<double>& Y, int n) {
    vector<double> X(n, 0);
    for (int i = n - 1; i >= 0; i--) {
        double sum = 0;
        for (int j = i + 1; j < n; j++) {
            sum += U[i][j] * X[j];
        }
        X[i] = (Y[i] - sum) / U[i][i];
    }
    return X;
}

int main() {
    int n;
    cout << "Enter the number of equations (n): ";
    cin >> n;
    
    vector<vector<double>> A(n, vector<double>(n));
    vector<vector<double>> L(n, vector<double>(n, 0));
    vector<vector<double>> U(n, vector<double>(n, 0));
    vector<double> B(n);
    
    cout << "Enter the coefficient matrix A:" << endl;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cin >> A[i][j];
        }
    }
    
    cout << "Enter the RHS vector B:" << endl;
    for (int i = 0; i < n; i++) {
        cin >> B[i];
    }
    
    // Perform LU Decomposition
    luDecomposition(A, L, U, n);
    
    // Solve LY = B using Forward Substitution
    vector<double> Y = forwardSubstitution(L, B, n);
    
    // Solve UX = Y using Backward Substitution
    vector<double> X = backwardSubstitution(U, Y, n);
    
    // Display the solution
    cout << "Solution:\n";
    for (int i = 0; i < n; i++) {
        cout << "x" << i + 1 << " = " << fixed << setprecision(6) << X[i] << endl;
    }
    
    return 0;
}
